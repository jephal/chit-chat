// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: grpc/chitchat.proto

package chitchat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChitChatService_JoinChat_FullMethodName    = "/chitchat.ChitChatService/JoinChat"
	ChitChatService_SendMessage_FullMethodName = "/chitchat.ChitChatService/SendMessage"
	ChitChatService_LeaveChat_FullMethodName   = "/chitchat.ChitChatService/LeaveChat"
)

// ChitChatServiceClient is the client API for ChitChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChitChatServiceClient interface {
	JoinChat(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BroadcastMessage], error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*BroadcastMessage, error)
	LeaveChat(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*BroadcastMessage, error)
}

type chitChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChitChatServiceClient(cc grpc.ClientConnInterface) ChitChatServiceClient {
	return &chitChatServiceClient{cc}
}

func (c *chitChatServiceClient) JoinChat(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BroadcastMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChitChatService_ServiceDesc.Streams[0], ChitChatService_JoinChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinRequest, BroadcastMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChitChatService_JoinChatClient = grpc.ServerStreamingClient[BroadcastMessage]

func (c *chitChatServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*BroadcastMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastMessage)
	err := c.cc.Invoke(ctx, ChitChatService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chitChatServiceClient) LeaveChat(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*BroadcastMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastMessage)
	err := c.cc.Invoke(ctx, ChitChatService_LeaveChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChitChatServiceServer is the server API for ChitChatService service.
// All implementations must embed UnimplementedChitChatServiceServer
// for forward compatibility.
type ChitChatServiceServer interface {
	JoinChat(*JoinRequest, grpc.ServerStreamingServer[BroadcastMessage]) error
	SendMessage(context.Context, *SendMessageRequest) (*BroadcastMessage, error)
	LeaveChat(context.Context, *LeaveRequest) (*BroadcastMessage, error)
	mustEmbedUnimplementedChitChatServiceServer()
}

// UnimplementedChitChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChitChatServiceServer struct{}

func (UnimplementedChitChatServiceServer) JoinChat(*JoinRequest, grpc.ServerStreamingServer[BroadcastMessage]) error {
	return status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedChitChatServiceServer) SendMessage(context.Context, *SendMessageRequest) (*BroadcastMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChitChatServiceServer) LeaveChat(context.Context, *LeaveRequest) (*BroadcastMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedChitChatServiceServer) mustEmbedUnimplementedChitChatServiceServer() {}
func (UnimplementedChitChatServiceServer) testEmbeddedByValue()                         {}

// UnsafeChitChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChitChatServiceServer will
// result in compilation errors.
type UnsafeChitChatServiceServer interface {
	mustEmbedUnimplementedChitChatServiceServer()
}

func RegisterChitChatServiceServer(s grpc.ServiceRegistrar, srv ChitChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChitChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChitChatService_ServiceDesc, srv)
}

func _ChitChatService_JoinChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChitChatServiceServer).JoinChat(m, &grpc.GenericServerStream[JoinRequest, BroadcastMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChitChatService_JoinChatServer = grpc.ServerStreamingServer[BroadcastMessage]

func _ChitChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChitChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChitChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChitChatServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChitChatService_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChitChatServiceServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChitChatService_LeaveChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChitChatServiceServer).LeaveChat(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChitChatService_ServiceDesc is the grpc.ServiceDesc for ChitChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChitChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chitchat.ChitChatService",
	HandlerType: (*ChitChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChitChatService_SendMessage_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _ChitChatService_LeaveChat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinChat",
			Handler:       _ChitChatService_JoinChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/chitchat.proto",
}
